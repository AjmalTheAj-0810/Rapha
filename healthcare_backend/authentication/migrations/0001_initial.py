# Generated by Django 5.2.3 on 2025-06-30 11:46

import authentication.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('patient', 'Patient'), ('physiotherapist', 'Physiotherapist'), ('admin', 'Admin')], default='patient', help_text='Type of user account', max_length=20)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number in international format', max_length=17, null=True, validators=[authentication.models.validate_phone_number])),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth for age verification', null=True)),
                ('address', models.TextField(blank=True, help_text='Complete address', max_length=500, null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture (max 5MB)', null=True, upload_to='profile_pics/')),
                ('is_verified', models.BooleanField(default=False, help_text="Whether the user's email/phone is verified")),
                ('is_active_session', models.BooleanField(default=False, help_text='Whether user has an active session')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='Last login IP address for security', null=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of failed login attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Account locked until this time', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_history', models.TextField(blank=True, help_text="Patient's medical history and conditions", null=True)),
                ('allergies', models.TextField(blank=True, help_text='Known allergies and reactions', null=True)),
                ('current_medications', models.TextField(blank=True, help_text='Current medications and dosages', null=True)),
                ('blood_type', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=3, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in centimeters', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kilograms', max_digits=5, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=17, null=True, validators=[authentication.models.validate_phone_number])),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True)),
                ('insurance_provider', models.CharField(blank=True, max_length=100, null=True)),
                ('insurance_number', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'patient_profiles',
            },
        ),
        migrations.CreateModel(
            name='PhysiotherapistProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(help_text='Professional license number', max_length=50, unique=True)),
                ('specializations', models.JSONField(default=list, help_text='List of specializations')),
                ('years_of_experience', models.PositiveIntegerField(default=0, help_text='Years of professional experience')),
                ('education', models.TextField(blank=True, help_text='Educational background and degrees', null=True)),
                ('certifications', models.JSONField(default=list, help_text='Professional certifications')),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0.0, help_text='Consultation fee per session', max_digits=10)),
                ('is_available', models.BooleanField(default=True, help_text='Whether accepting new patients')),
                ('bio', models.TextField(blank=True, help_text='Professional biography', max_length=1000, null=True)),
                ('languages_spoken', models.JSONField(default=list, help_text='Languages spoken')),
                ('clinic_address', models.TextField(blank=True, help_text='Clinic or practice address', null=True)),
                ('working_hours', models.JSONField(default=dict, help_text='Working hours schedule')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating from patients', max_digits=3)),
                ('total_reviews', models.PositiveIntegerField(default=0, help_text='Total number of reviews')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='physiotherapist_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'physiotherapist_profiles',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='auth_user_user_ty_90c0e9_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='auth_user_is_veri_c40f2e_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='auth_user_created_2cecd0_idx'),
        ),
        migrations.AddIndex(
            model_name='patientprofile',
            index=models.Index(fields=['blood_type'], name='patient_pro_blood_t_c3c270_idx'),
        ),
        migrations.AddIndex(
            model_name='patientprofile',
            index=models.Index(fields=['created_at'], name='patient_pro_created_2ba952_idx'),
        ),
        migrations.AddIndex(
            model_name='physiotherapistprofile',
            index=models.Index(fields=['license_number'], name='physiothera_license_6df5e8_idx'),
        ),
        migrations.AddIndex(
            model_name='physiotherapistprofile',
            index=models.Index(fields=['is_available'], name='physiothera_is_avai_1c3697_idx'),
        ),
        migrations.AddIndex(
            model_name='physiotherapistprofile',
            index=models.Index(fields=['rating'], name='physiothera_rating_28c7a9_idx'),
        ),
        migrations.AddIndex(
            model_name='physiotherapistprofile',
            index=models.Index(fields=['created_at'], name='physiothera_created_4b22e5_idx'),
        ),
    ]
