# Generated by Django 5.2.3 on 2025-06-30 11:46

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExerciseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description', null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class name for UI', max_length=50, null=True)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code for category', max_length=7)),
                ('is_active', models.BooleanField(default=True, help_text='Whether category is active')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Sort order for display')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Exercise Categories',
                'db_table': 'exercise_categories',
                'ordering': ['sort_order', 'name'],
                'indexes': [models.Index(fields=['is_active'], name='exercise_ca_is_acti_d00f8c_idx'), models.Index(fields=['sort_order'], name='exercise_ca_sort_or_27e841_idx')],
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Exercise name', max_length=100)),
                ('description', models.TextField(help_text='Detailed exercise description')),
                ('instructions', models.TextField(default='', help_text='Step-by-step instructions')),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('target_body_parts', models.JSONField(default=list, help_text='List of target body parts')),
                ('duration', models.PositiveIntegerField(help_text='Duration in minutes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
                ('repetitions', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('sets', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('rest_time', models.PositiveIntegerField(default=30, help_text='Rest time between sets in seconds')),
                ('calories_burned', models.PositiveIntegerField(default=0, help_text='Estimated calories burned per session')),
                ('equipment_needed', models.JSONField(default=list, help_text='List of equipment needed')),
                ('precautions', models.TextField(blank=True, help_text='Safety precautions and contraindications', null=True)),
                ('benefits', models.TextField(blank=True, help_text='Exercise benefits', null=True)),
                ('video_url', models.URLField(blank=True, help_text='Video demonstration URL', null=True)),
                ('image', models.ImageField(blank=True, help_text='Exercise demonstration image', null=True, upload_to='exercise_images/')),
                ('is_active', models.BooleanField(default=True, help_text='Whether exercise is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this exercise', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_exercises', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='exercises.exercisecategory')),
            ],
            options={
                'db_table': 'exercises',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExercisePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Plan name', max_length=100)),
                ('description', models.TextField(help_text='Plan description and goals')),
                ('start_date', models.DateField(help_text='Plan start date')),
                ('end_date', models.DateField(help_text='Plan end date')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('completed', 'Completed'), ('paused', 'Paused'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('goals', models.TextField(blank=True, help_text='Treatment goals and objectives', null=True)),
                ('frequency_per_week', models.PositiveIntegerField(default=3, help_text='Recommended frequency per week', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('estimated_duration_weeks', models.PositiveIntegerField(default=4, help_text='Estimated duration in weeks')),
                ('difficulty_progression', models.BooleanField(default=False, help_text='Whether difficulty should progress over time')),
                ('notes', models.TextField(blank=True, help_text='Additional notes for the patient', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(limit_choices_to={'user_type': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='exercise_plans', to=settings.AUTH_USER_MODEL)),
                ('physiotherapist', models.ForeignKey(limit_choices_to={'user_type': 'physiotherapist'}, on_delete=django.db.models.deletion.CASCADE, related_name='created_exercise_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'exercise_plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExercisePlanItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of week for this exercise')),
                ('week_number', models.PositiveIntegerField(default=1, help_text='Week number in the plan')),
                ('custom_repetitions', models.PositiveIntegerField(blank=True, help_text='Custom repetitions (overrides exercise default)', null=True)),
                ('custom_sets', models.PositiveIntegerField(blank=True, help_text='Custom sets (overrides exercise default)', null=True)),
                ('custom_duration', models.PositiveIntegerField(blank=True, help_text='Custom duration in minutes', null=True)),
                ('intensity_level', models.PositiveSmallIntegerField(choices=[(1, 'Very Light'), (2, 'Light'), (3, 'Moderate'), (4, 'Hard'), (5, 'Very Hard')], default=3, help_text='Exercise intensity level')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this exercise is mandatory')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of exercise in the day')),
                ('notes', models.TextField(blank=True, help_text='Special instructions for this exercise', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exercises.exercise')),
                ('exercise_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_items', to='exercises.exerciseplan')),
            ],
            options={
                'db_table': 'exercise_plan_items',
                'ordering': ['week_number', 'day_of_week', 'order'],
            },
        ),
        migrations.AddField(
            model_name='exerciseplan',
            name='exercises',
            field=models.ManyToManyField(through='exercises.ExercisePlanItem', to='exercises.exercise'),
        ),
        migrations.CreateModel(
            name='ExerciseProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_completed', models.DateField(help_text='Date when exercise was performed')),
                ('completion_status', models.CharField(choices=[('completed', 'Completed'), ('partial', 'Partially Completed'), ('skipped', 'Skipped'), ('modified', 'Modified')], default='completed', max_length=20)),
                ('completed_repetitions', models.PositiveIntegerField(default=0, help_text='Number of repetitions completed')),
                ('completed_sets', models.PositiveIntegerField(default=0, help_text='Number of sets completed')),
                ('actual_duration', models.PositiveIntegerField(default=0, help_text='Actual duration in minutes')),
                ('difficulty_rating', models.PositiveSmallIntegerField(choices=[(1, 'Very Easy'), (2, 'Easy'), (3, 'Moderate'), (4, 'Hard'), (5, 'Very Hard')], default=3, help_text='How difficult was the exercise')),
                ('pain_level_before', models.PositiveSmallIntegerField(choices=[(0, 'No Pain'), (1, 'Mild'), (2, 'Moderate'), (3, 'Severe'), (4, 'Very Severe')], default=0, help_text='Pain level before exercise')),
                ('pain_level_after', models.PositiveSmallIntegerField(choices=[(0, 'No Pain'), (1, 'Mild'), (2, 'Moderate'), (3, 'Severe'), (4, 'Very Severe')], default=0, help_text='Pain level after exercise')),
                ('energy_level', models.PositiveSmallIntegerField(choices=[(1, 'Very Low'), (2, 'Low'), (3, 'Moderate'), (4, 'High'), (5, 'Very High')], default=3, help_text='Energy level during exercise')),
                ('mood_rating', models.PositiveSmallIntegerField(choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Neutral'), (4, 'Good'), (5, 'Very Good')], default=3, help_text='Mood after exercise')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the session', null=True)),
                ('side_effects', models.TextField(blank=True, help_text='Any side effects experienced', null=True)),
                ('modifications_made', models.TextField(blank=True, help_text='Any modifications made to the exercise', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exercise_plan_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='exercises.exerciseplanitem')),
                ('patient', models.ForeignKey(limit_choices_to={'user_type': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='exercise_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Exercise Progress',
                'db_table': 'exercise_progress',
                'ordering': ['-date_completed', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='exercise',
            index=models.Index(fields=['category', 'difficulty'], name='exercises_categor_374e70_idx'),
        ),
        migrations.AddIndex(
            model_name='exercise',
            index=models.Index(fields=['is_active'], name='exercises_is_acti_9a5544_idx'),
        ),
        migrations.AddIndex(
            model_name='exercise',
            index=models.Index(fields=['created_at'], name='exercises_created_55810d_idx'),
        ),
        migrations.AddIndex(
            model_name='exerciseplanitem',
            index=models.Index(fields=['exercise_plan', 'day_of_week'], name='exercise_pl_exercis_2049d8_idx'),
        ),
        migrations.AddIndex(
            model_name='exerciseplanitem',
            index=models.Index(fields=['week_number'], name='exercise_pl_week_nu_4914e0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='exerciseplanitem',
            unique_together={('exercise_plan', 'exercise', 'day_of_week', 'week_number')},
        ),
        migrations.AddIndex(
            model_name='exerciseplan',
            index=models.Index(fields=['patient', 'status'], name='exercise_pl_patient_b30037_idx'),
        ),
        migrations.AddIndex(
            model_name='exerciseplan',
            index=models.Index(fields=['physiotherapist', 'status'], name='exercise_pl_physiot_5bfcb8_idx'),
        ),
        migrations.AddIndex(
            model_name='exerciseplan',
            index=models.Index(fields=['start_date', 'end_date'], name='exercise_pl_start_d_418b4d_idx'),
        ),
        migrations.AddIndex(
            model_name='exerciseprogress',
            index=models.Index(fields=['patient', 'date_completed'], name='exercise_pr_patient_f3c840_idx'),
        ),
        migrations.AddIndex(
            model_name='exerciseprogress',
            index=models.Index(fields=['exercise_plan_item', 'date_completed'], name='exercise_pr_exercis_08c1dd_idx'),
        ),
        migrations.AddIndex(
            model_name='exerciseprogress',
            index=models.Index(fields=['completion_status'], name='exercise_pr_complet_cac034_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='exerciseprogress',
            unique_together={('patient', 'exercise_plan_item', 'date_completed')},
        ),
    ]
